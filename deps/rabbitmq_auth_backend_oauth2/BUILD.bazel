load("@rules_erlang//:xref2.bzl", "xref")
load("@rules_erlang//:dialyze.bzl", "dialyze", "plt")
load(
    "//:rabbitmq.bzl",
    "RABBITMQ_DIALYZER_OPTS",
    "assert_suites",
    "broker_for_integration_suites",
    "rabbitmq_app",
    "rabbitmq_integration_suite",
    "rabbitmq_suite",
    "rabbitmq_test_helper",
    "without",
)

APP_NAME = "rabbitmq_auth_backend_oauth2"

APP_DESCRIPTION = "OAuth 2 and JWT-based AuthN and AuthZ backend"

EXTRA_APPS = [
    "inets",
    "public_key",
]

BUILD_DEPS = [
    "//deps/rabbit_common:erlang_app",
    "//deps/rabbitmq_cli:erlang_app",
]

DEPS = [
    "@jose//:erlang_app",
]

RUNTIME_DEPS = [
    "//deps/rabbit:erlang_app",
    "@base64url//:erlang_app",
    "@cowlib//:erlang_app",
]

rabbitmq_app(
    app_description = APP_DESCRIPTION,
    app_name = APP_NAME,
    build_deps = BUILD_DEPS,
    extra_apps = EXTRA_APPS,
    runtime_deps = RUNTIME_DEPS,
    deps = DEPS,
)

xref(
    additional_libs = [
        "//deps/rabbitmq_cli:erlang_app",
    ],
)

plt(
    name = "base_plt",
    apps = EXTRA_APPS,
    libs = ["//deps/rabbitmq_cli:elixir"],
    plt = "//:base_plt",
    deps = ["//deps/rabbitmq_cli:elixir"] + BUILD_DEPS + DEPS + RUNTIME_DEPS,
)

dialyze(
    dialyzer_opts = RABBITMQ_DIALYZER_OPTS,
    plt = ":base_plt",
)

broker_for_integration_suites(
    extra_plugins = [
        "//deps/rabbitmq_mqtt:erlang_app",
    ],
)

rabbitmq_test_helper(
    name = "rabbit_auth_backend_oauth2_test_util",
    srcs = [
        "test/rabbit_auth_backend_oauth2_test_util.erl",
    ],
)

rabbitmq_integration_suite(
    name = "add_uaa_key_command_SUITE",
    size = "small",
)

rabbitmq_integration_suite(
    name = "config_schema_SUITE",
)

rabbitmq_integration_suite(
    name = "jwks_SUITE",
    additional_beam = [
        ":rabbit_auth_backend_oauth2_test_util",
    ],
    additional_srcs = [
        "test/jwks_http_app.erl",
        "test/jwks_http_handler.erl",
        "test/jwks_http_sup.erl",
    ],
    runtime_deps = [
        "@cowboy//:erlang_app",
    ],
)

rabbitmq_suite(
    name = "scope_SUITE",
    size = "medium",
    deps = [
        "//deps/rabbit_common:erlang_app",
    ],
)

rabbitmq_integration_suite(
    name = "system_SUITE",
    size = "medium",
    additional_beam = [
        ":rabbit_auth_backend_oauth2_test_util",
    ],
    runtime_deps = [
        "@emqtt//:erlang_app",
    ],
)

rabbitmq_integration_suite(
    name = "unit_SUITE",
    size = "medium",
    additional_beam = [
        ":rabbit_auth_backend_oauth2_test_util",
    ],
)

rabbitmq_suite(
    name = "wildcard_match_SUITE",
    size = "small",
)

assert_suites()

alias(
    name = "rabbitmq_auth_backend_oauth2",
    actual = ":erlang_app",
    visibility = ["//visibility:public"],
)
