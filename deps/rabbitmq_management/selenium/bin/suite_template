#!/usr/bin/env bash

SCRIPT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
SUITE=$(caller)
SUITE=$(basename "${SUITE}" .sh )

SELENIUM_DOCKER_IMAGE=selenium/standalone-chrome:103.0
UAA_DOCKER_IMAGE=cloudfoundry/uaa:75.21.0
KEYCLOAK_DOCKER_IMAGE=quay.io/keycloak/keycloak:20.0
HTTPD_DOCKER_IMAGE=httpd:latest
PADDING=""
ENV_FILE=/tmp/rabbitmq/.env
declare -a REQUIRED_COMPONENTS

tabs 4

print() {
  echo -e "${PADDING}$1"
}
begin() {
  print "\n$@"
  PADDING="${PADDING}\t"
}
end() {
  PADDING=`echo $PADDING | rev | cut -c 4- | rev`
  print "$@"
}
init_suite() {
  TEST_DIR=$(realpath ${SCRIPT}/../test)
  TEST_CASES_DIR=$(realpath ${TEST_DIR}${TEST_CASES_PATH:?"missing TEST_CASES_PATH"})
  if [ -z "${TEST_CONFIG_PATH}" ]; then TEST_CONFIG_DIR=$TEST_CASES_DIR
  else TEST_CONFIG_DIR=$(realpath ${TEST_DIR}${TEST_CONFIG_PATH})
  fi
  DOCKER_NETWORK=${DOCKER_NETWORK:-rabbitmq_net}

  begin "Initializing suite $SUITE ..."
  print "> REQUIRED_COMPONENTS: ${REQUIRED_COMPONENTS[*]}"
  print "> TEST_CASES_DIR: ${TEST_CASES_DIR} "
  print "> TEST_CONFIG_DIR: ${TEST_CONFIG_DIR} "
  print "> DOCKER_NETWORK: ${DOCKER_NETWORK} "
  print "> PROFILES: ${PROFILES} "
  print "> ENV_FILE: ${ENV_FILE} "
  end "Initialized suite ..."
}

BIN_DIR=${SCRIPT}/../bin
LOGS=$PWD/logs/${SUITE}
SCREENS=$PWD/screens/${SUITE}

build_mocha_image() {
  if [[ "$(docker images -q mocha-test 2> /dev/null)" == "" ]]; then
    docker build -t mocha-test  --target test $SCRIPT/..
  fi
}

requires() {
  REQUIRED_COMPONENTS=$@
}

start_selenium() {
  begin "Starting selenium  ..."

  print "> SELENIUM_DOCKER_IMAGE: ${SELENIUM_DOCKER_IMAGE}"
  kill_container_if_exist selenium

  docker run \
    --detach \
    --name selenium \
    --net ${DOCKER_NETWORK} \
    -p 4444:4444 \
    --shm-size=2g \
    ${SELENIUM_DOCKER_IMAGE}

  wait_for_message selenium "Started Selenium Standalone"
  end "Selenium ready"
}

kill_container_if_exist() {
  docker stop $1 &> /dev/null || true && docker rm $1 &> /dev/null || true
}
wait_for_message() {
  attemps_left=10
  while ! docker logs $1 | grep -q "$2";
  do
      sleep 5
      print "Waiting 5sec for $1 to start ($attemps_left attempts left )..."
      ((attemps_left--))
      if [[ "$attemps_left" -lt 1 ]]; then
        print "Timed out waiting"
        exit 1
      fi
  done
}

init_rabbitmq() {
  RABBITMQ_CONFIG_DIR=${TEST_CONFIG_DIR}
  RABBITMQ_DOCKER_IMAGE=${RABBITMQ_DOCKER_IMAGE:-rabbitmq}
  RABBITMQ_URL=${RABBITMQ_URL:-http://rabbitmq:15672}

  print "> RABBITMQ_CONFIG_DIR: ${RABBITMQ_CONFIG_DIR}"
  print "> RABBITMQ_DOCKER_IMAGE: ${RABBITMQ_DOCKER_IMAGE}"
  print "> RABBITMQ_URL: ${RABBITMQ_URL}"
  [[ -z "${OAUTH_SIGNING_KEY_DIR}" ]] || print "> OAUTH_SIGNING_KEY_DIR: ${OAUTH_SIGNING_KEY_DIR} relative to ${TEST_DIR}"

}

start_rabbitmq() {
  begin "Starting rabbitmq ..."

  init_rabbitmq
  kill_container_if_exist rabbitmq

  MOUNT_RABBITMQ_CONF="/etc/rabbitmq/rabbitmq.conf"
  ${BIN_DIR}/gen-rabbitmq-conf ${RABBITMQ_CONFIG_DIR} $ENV_FILE /tmp$MOUNT_RABBITMQ_CONF
  print "> EFFECTIVE RABBITMQ_CONFIG_FILE: /tmp$MOUNT_RABBITMQ_CONF"

  docker run \
    --detach \
    --name rabbitmq \
    --net ${DOCKER_NETWORK} \
    -p 15672:15672 -p 5672:5672 \
    -v ${RABBITMQ_CONFIG_DIR}/logging.conf:/etc/rabbitmq/conf.d/logging.conf:ro \
    -v /tmp$MOUNT_RABBITMQ_CONF:${MOUNT_RABBITMQ_CONF}:ro \
    -v ${RABBITMQ_CONFIG_DIR}/enabled_plugins:/etc/rabbitmq/enabled_plugins \
    -v ${TEST_DIR}/${OAUTH_SIGNING_KEY_DIR}:/config \
    ${RABBITMQ_DOCKER_IMAGE}

  wait_for_message rabbitmq "Server startup complete"
  end "RabbitMQ ready"
}
init_uaa() {
  UAA_CONFIG_PATH=${UAA_CONFIG_PATH:-oauth/uaa}
  UAA_CONFIG_DIR=$(realpath ${TEST_DIR}/${UAA_CONFIG_PATH})

  print "> UAA_CONFIG_DIR: ${UAA_CONFIG_DIR}"
  print "> UAA_URL: ${UAA_URL}"
  print "> UAA_DOCKER_IMAGE: ${UAA_DOCKER_IMAGE}"
}
start_uaa() {
  begin "Starting UAA ..."

  init_uaa
  kill_container_if_exist uaa

  MOUNT_UAA_CONF_DIR=/tmp/uaa

  mkdir -p $MOUNT_UAA_CONF_DIR
  cp ${UAA_CONFIG_DIR}/* $MOUNT_UAA_CONF_DIR
  ${BIN_DIR}/gen-uaa-yml ${UAA_CONFIG_DIR} $ENV_FILE $MOUNT_UAA_CONF_DIR/uaa.yml
  print "> EFFECTIVE UAA_CONFIG_FILE: $MOUNT_UAA_CONF_DIR/uaa.yml"

  docker run \
    --detach \
    --name uaa \
    --net ${DOCKER_NETWORK} \
    --publish 8080:8080 \
    --mount "type=bind,source=$MOUNT_UAA_CONF_DIR,target=/uaa" \
    --env UAA_CONFIG_PATH="/uaa" \
    --env JAVA_OPTS="-Djava.security.egd=file:/dev/./urandom" \
    ${UAA_DOCKER_IMAGE}

  wait_for_oidc_endpoint uaa $UAA_URL
  end "UAA is ready"
}
init_keycloak() {
  KEYCLOAK_CONFIG_PATH=${KEYCLOAK_CONFIG_PATH:-oauth/keycloak}
  KEYCLOAK_CONFIG_DIR=$(realpath ${TEST_DIR}/${KEYCLOAK_CONFIG_PATH})
  KEYCLOAK_URL=${OAUTH_PROVIDER_URL}

  print "> KEYCLOAK_CONFIG_DIR: ${KEYCLOAK_CONFIG_DIR}"
  print "> KEYCLOAK_URL: ${KEYCLOAK_URL}"
  print "> KEYCLOAK_DOCKER_IMAGE: ${KEYCLOAK_DOCKER_IMAGE}"
}
start_keycloak() {
  begin "Starting keycloak ..."

  init_keycloak
  kill_container_if_exist keycloak

  MOUNT_KEYCLOAK_CONF_DIR=/tmp/keycloak

  mkdir -p $MOUNT_KEYCLOAK_CONF_DIR
  ${BIN_DIR}/gen-keycloak-json ${KEYCLOAK_CONFIG_DIR} $ENV_FILE $MOUNT_KEYCLOAK_CONF_DIR/test-realm.json
  print "> EFFECTIVE KEYCLOAK_CONFIG_FILE: $MOUNT_KEYCLOAK_CONF_DIR/test-realm.json"

  docker run \
		--detach \
		--name keycloak \
    --net ${DOCKER_NETWORK} \
		--publish 8080:8080 \
		--env KEYCLOAK_ADMIN=admin \
		--env KEYCLOAK_ADMIN_PASSWORD=admin \
		--mount type=bind,source=${MOUNT_KEYCLOAK_CONF_DIR}/,target=/opt/keycloak/data/import/ \
		${KEYCLOAK_DOCKER_IMAGE} start-dev --import-realm

  wait_for_oidc_endpoint keycloak $KEYCLOAK_URL
  end "Keycloak is ready"
}
wait_for_oidc_endpoint() {
  NAME=$1
  BASE_URL=$2

  max_retry=10
  counter=0
  print "Waiting for OIDC discovery endpoint $NAME ... (BASE_URL: $BASE_URL)"
  until (docker run --net ${DOCKER_NETWORK} --rm curlimages/curl:7.85.0 -L --fail ${BASE_URL}/.well-known/openid-configuration >/dev/null 2>&1)
  do
    sleep 5
    [[ counter -eq $max_retry ]] && print "Failed!" && exit 1
    print "Trying again. Try #$counter"
    ((counter++))
  done
  sleep 20
}

init_fakeportal() {
  FAKE_PORTAL_URL=${FAKE_PORTAL_URL:-http://fakeportal:3000}
  FAKE_PORTAL_DIR=${SCRIPT}/../fakeportal
  CLIENT_ID="${CLIENT_ID:-rabbit_idp_user}"
  CLIENT_SECRET="${CLIENT_SECRET:-rabbit_idp_user}"

  print "> FAKE_PORTAL_URL: ${FAKE_PORTAL_URL}"
  print "> UAA_URL: ${UAA_URL}"
  print "> RABBITMQ_URL: ${RABBITMQ_URL}"
  print "> CLIENT_ID: ${CLIENT_ID}"
  print "> CLIENT_SECRET: ${CLIENT_SECRET}"
}
start_fakeportal() {
  begin "Starting fakeportal ..."

  init_fakeportal
  kill_container_if_exist fakeportal

  docker run \
    --detach \
    --name fakeportal \
    --net ${DOCKER_NETWORK} \
    --publish 3000:3000 \
    --env RABBITMQ_URL="${RABBITMQ_URL}" \
    --env UAA_URL="${UAA_URL}" \
    --env CLIENT_ID="${CLIENT_ID}" \
    --env CLIENT_SECRET="${CLIENT_SECRET}" \
    -v ${FAKE_PORTAL_DIR}:/code/fakeportal \
    mocha-test run fakeportal

  wait_for_url $FAKE_PORTAL_URL
  end "Fakeportal is ready"
}

init_fakeproxy() {
  FAKE_PROXY_URL=${FAKE_PROXY_URL:-http://fakeproxy:3000}
  FAKE_PROXY_DIR=${SCRIPT}/../fakeportal
  CLIENT_ID="${CLIENT_ID:-rabbit_idp_user}"
  CLIENT_SECRET="${CLIENT_SECRET:-rabbit_idp_user}"
  print "> FAKE_PROXY_URL: ${FAKE_PROXY_URL}"
  print "> UAA_BASE_URL: ${UAA_BASE_URL}"
  print "> RABBITMQ_URL: ${RABBITMQ_URL}"
  print "> CLIENT_ID: ${CLIENT_ID}"
  print "> CLIENT_SECRET: ${CLIENT_SECRET}"
}
start_fakeproxy() {
  begin "Starting fakeproxy ..."

  init_fakeproxy
  kill_container_if_exist fakeproxy

  docker run \
    --detach \
    --name fakeproxy \
    --net ${DOCKER_NETWORK} \
    --publish 3000:3000 \
    --env RABBITMQ_URL="${RABBITMQ_URL}" \
    --env UAA_URL="${UAA_BASE_URL}" \
    --env CLIENT_ID="${CLIENT_ID}" \
    --env CLIENT_SECRET="${CLIENT_SECRET}" \
    -v ${FAKE_PROXY_DIR}:/code/fakeportal \
    mocha-test run fakeproxy

  RABBITMQ_URL="$FAKE_PROXY_URL"

  wait_for_url $FAKE_PROXY_URL
  end "Fakeproxy is ready"

}

wait_for_url() {
  url=$1
  max_retry=10
  counter=0
  until (docker run --net rabbitmq_net --rm curlimages/curl:7.85.0 -L -f -v $url >/dev/null 2>&1)
  do
    print "Waiting for $url to start"
    sleep 5
    [[ counter -eq $max_retry ]] && print "Failed!" && exit 1
    print "Trying again. Try #$counter"
    ((counter++))
  done
}

init_proxy() {
  HTTPD_CONFIG_PATH=${HTTPD_CONFIG_PATH:?"missing HTTPD_CONFIG_PATH"}
  HTTPD_CONFIG_DIR=${TEST_DIR}${HTTPD_CONFIG_PATH}
  PROXIED_RABBITMQ_URL=${PROXIED_RABBITMQ_URL:?"missing PROXIED_RABBITMQ_URL"}

  print "> HTTPD_CONFIG: ${HTTPD_CONFIG_DIR}"
  print "> PROXIED_RABBITMQ_URL: ${PROXIED_RABBITMQ_URL}"
  print "> HTTPD_DOCKER_IMAGE: ${HTTPD_DOCKER_IMAGE}"
}
start_proxy() {
  begin "Starting proxy ..."

  init_proxy
  kill_container_if_exist proxy

  docker run \
    --detach \
    --name proxy \
    --net ${DOCKER_NETWORK} \
    --publish 8080:8080 \
    --mount "type=bind,source=${HTTPD_CONFIG_DIR},target=/usr/local/apache2/conf" \
    ${HTTPD_DOCKER_IMAGE}

  wait_for_url $PROXIED_RABBITMQ_URL
  end "Proxy is ready"
}


test () {
  kill_container_if_exist mocha
  begin "Running tests with env variables:"

  print "> RABBITMQ_URL: ${RABBITMQ_URL}"
  print "> UAA_URL: ${UAA_URL}"
  print "> FAKE_PORTAL_URL: ${FAKE_PORTAL_URL}"

  docker run \
    --rm \
    --name mocha \
    --net ${DOCKER_NETWORK} \
    --env RABBITMQ_URL=${RABBITMQ_URL} \
    --env UAA_URL=${UAA_URL} \
    --env FAKE_PORTAL_URL=${FAKE_PORTAL_URL} \
    --env RUN_LOCAL=false \
    -v ${TEST_DIR}:/code/test \
    -v ${SCREENS}:/screens \
    mocha-test test /code/test${TEST_CASES_PATH}

  end "Finishing running test"
}

save_logs() {
  mkdir -p $LOGS
  save_container_logs selenium
}
save_container_logs() {
  docker container ls | grep $1 >/dev/null 2>&1 && docker logs $1 > $LOGS/$1.log || echo "$1 not running"
}

profiles_with_local_or_docker() {
  if [[ "$PROFILES" != *"local"* && "$PROFILES" != *"docker"* ]]; then
    echo "$PROFILES docker"
  else
    echo "$PROFILES"
  fi
}
generate_env_file() {
    mkdir -p /tmp/rabbitmq
    ${BIN_DIR}/gen-env-file $TEST_CONFIG_DIR $ENV_FILE
    source $ENV_FILE
}
run() {
  runWith rabbitmq
}
runWith() {
  if [[ "$@" != *"rabbitmq"* ]]; then
    REQUIRED_COMPONENTS+=("rabbitmq")
  fi

  for (( i=1; i<=$#; i++)) {
    eval val='$'$i
    REQUIRED_COMPONENTS+=( "$val" )
  }

  export PROFILES=`profiles_with_local_or_docker`
  init_suite
  generate_env_file
  build_mocha_image
  start_selenium

  trap _teardown EXIT

  [[ $(type -t _setup) == function ]] &&  _setup

  test
  TEST_RESULT=$?

  save_logs
  [[ $(type -t _save_logs) == function ]] &&  _save_logs

  #[[ $(type -t _teardown) == function ]] &&  _teardown

  kill_container_if_exist selenium

  exit $TEST_RESULT

}
_setup() {
  for i in "${REQUIRED_COMPONENTS[@]}"
  do
    start="start_$i"
    $start
  done
}
_teardown() {
  begin "Tear down ..."
  for i in "${REQUIRED_COMPONENTS[@]}"
  do
    print "Tear down $i"
    $(kill_container_if_exist $i)
  done
  end "Finished teardown"
}
_save_logs() {
  begin "Saving Logs to $LOGS ..."
  for i in "${REQUIRED_COMPONENTS[@]}"
  do
    print "Saving logs for $i"
    $(save_container_logs $i)
  done
  end "Finished saving logs"
}
