load("@rules_erlang//:xref2.bzl", "xref")
load("@rules_erlang//:dialyze.bzl", "dialyze", "plt")
load(
    "//:rabbitmq.bzl",
    "RABBITMQ_DIALYZER_OPTS",
    "assert_suites",
    "broker_for_integration_suites",
    "rabbitmq_app",
    "rabbitmq_integration_suite",
    "rabbitmq_suite",
    "without",
)

APP_NAME = "rabbitmq_peer_discovery_etcd"

APP_DESCRIPTION = "etcd-based RabbitMQ peer discovery backend"

APP_MODULE = "rabbitmq_peer_discovery_etcd_app"

DEPS = [
    "//deps/rabbit_common:erlang_app",
    "//deps/rabbitmq_peer_discovery_common:erlang_app",
]

RUNTIME_DEPS = [
    "//deps/rabbit:erlang_app",
    "@eetcd//:erlang_app",
]

rabbitmq_app(
    app_description = APP_DESCRIPTION,
    app_module = APP_MODULE,
    app_name = APP_NAME,
    runtime_deps = RUNTIME_DEPS,
    deps = DEPS,
)

xref()

plt(
    name = "base_plt",
    plt = "//:base_plt",
    deps = DEPS + without(
        # eetcd depends on gun, which still uses erlang:get_stacktrace/0
        # and fails this rule if included
        "@eetcd//:erlang_app",
        RUNTIME_DEPS,
    ),
)

dialyze(
    dialyzer_opts = without(
        "-Wunknown", # also because of `eetcd'
        RABBITMQ_DIALYZER_OPTS
    ),
    plt = ":base_plt",
)

broker_for_integration_suites()

rabbitmq_integration_suite(
    name = "config_schema_SUITE",
)

rabbitmq_integration_suite(
    name = "system_SUITE",
    size = "medium",
)

rabbitmq_suite(
    name = "unit_SUITE",
    size = "small",
)

assert_suites()

alias(
    name = "rabbitmq_peer_discovery_etcd",
    actual = ":erlang_app",
    visibility = ["//visibility:public"],
)
